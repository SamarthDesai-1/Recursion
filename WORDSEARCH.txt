class Solution {
    
    private boolean dfs(char[][] grid, int i, int j, int count, String word) {
        if (count == word.length()) {
            return true;
        }
        int row = grid.length ,col = grid[0].length;
        if (i < 0 || j < 0 || i == row || j == col || grid[i][j] == '*' || grid[i][j] != word.charAt(count)) {
            return false;
        }
        char temp = grid[i][j];
        grid[i][j] = '*';
        boolean found = dfs(grid, i + 1, j, count + 1, word) || dfs(grid, i - 1, j, count + 1, word) || dfs(grid, i, j + 1, count + 1, word) || dfs(grid, i, j - 1, count + 1, word);
        grid[i][j] = temp;
        return found;
    }

    public boolean exist(char[][] grid, String targetWord) {
        for (int i = 0; i < grid.length; i++) 
            for (int j = 0; j < grid[0].length; j++) 
                if ((grid[i][j] == targetWord.charAt(0)) && dfs(grid ,i ,j ,0 ,targetWord))
                    return true;

        return false;
    }
}
